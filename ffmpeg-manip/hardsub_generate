#  va encoder une vidÃ©o avec FFmpeg en utilisant le GPU AMD (h264_amf)

#ouvre powershell->place toi dans le C:/Users/babak/Videos/1/SL/ ensuite met le code
# Commande FFmpeg pour l'encodage avec des sous-titres ASS

#si tu n'est pas dans le repertoire C:/Users/mamou/Videos/1/SL/SL8
ffmpeg -hwaccel dxva2 -i "C:/Users/mamou/Videos/1/SL/SL8.mp4"  -vf "ass=F.ass" -c:v h264_amf -quality speed -rc cqp -qp_i 22 -qp_p 25 -qp_b 27 -c:a copy "C:/Users/mamou/Videos/1/SL/SL8sub.mp4" 



ğŸ”´A noter que j'utilise hwaccel pour AMD
#si tu es dans ce repertoire
ffmpeg -hwaccel dxva2 -i "SL8.mp4"  -vf "ass=F.ass" -c:v h264_amf -quality speed -rc cqp -qp_i 22 -qp_p 25 -qp_b 27 -c:a copy "SL8sub.mp4" 

ffmpeg -hwaccel dxva2 -i "PSO6.mp4" -vf "ass=PSO6.ass" -c:v h264_amf -quality speed -rc cqp -qp_i 22 -qp_p 25 -qp_b 27 -c:a copy "PSO6sub.mp4"


ffmpeg -i "JP.mp4" -vf "ass=M.ass" -c:v h264_amf -quality speed -crf 22 -pix_fmt yuv420p -c:a copy "F.mp4"


# Fin du script

ğŸ”´Intel

ğŸŸ£Encoder en x264 (CPU) plus rapide
    ffmpeg -i video.mp4 -vf subtitles=subtitles.srt -c:v libx264 -preset ultrafast -c:a copy output.mp4

NB
-preset ultrafast = encode trÃ¨s vite, mais fichier plus gros

-preset veryfast est aussi rapide et meilleur en taille/qualitÃ©




ğŸŸ£Ajoute explicitement la conversion du format vidÃ©o en logiciel aprÃ¨s le dÃ©codage QSV et avant le filtre ass :
ffmpeg -hwaccel qsv -c:v h264_qsv -i PSO17.mp4 -vf "hwdownload,format=nv12,ass=a.ass" -c:v h264_qsv -preset fast -c:a copy output.mp4
    
    
    Le dÃ©codage et lâ€™encodage se font en QSV (Intel GPU).

    Le filtre ass est appliquÃ© en logiciel aprÃ¨s conversion (format=nv12) entre GPU et CPU.

     Gain de vitesse au niveau dÃ©codage/encodage, mais le filtrage reste limitÃ© par le CPU.
   
    hwdownload : rÃ©cupÃ¨re la frame de la mÃ©moire GPU vers la mÃ©moire CPU.

    format=nv12 : convertit au format vidÃ©o supportÃ© en logiciel.
    Ensuite on applique le filtre ass.


Sans hwdownload, ffmpeg essaie dâ€™appliquer le filtre ass sur une frame GPU => erreur.

Ensuite, avec -c:v h264_qsv on encode Ã  nouveau en matÃ©riel (QSV).

ğŸŸ¢Remarque sur nv=12
    Quand on parle de format vidÃ©o supportÃ© en logiciel, on parle du format de pixel (la maniÃ¨re dont les couleurs et images sont reprÃ©sentÃ©es en mÃ©moire) que le CPU peut manipuler directement.

    Explication simple
        Quand on utilise lâ€™accÃ©lÃ©ration matÃ©rielle (par exemple QSV avec Intel), la vidÃ©o est dÃ©codÃ©e et stockÃ©e dans la mÃ©moire GPU dans un certain format spÃ©cial, optimisÃ© pour la carte graphique.

        Ce format nâ€™est pas directement accessible ou modifiable par les filtres classiques qui tournent sur le CPU.

        Pour appliquer un filtre comme ass (qui ajoute les sous-titres en dur), il faut rÃ©cupÃ©rer cette image depuis la mÃ©moire GPU et la convertir dans un format que le CPU comprend et peut manipuler.

        Ce format, typiquement, est un format de pixel comme nv12, yuv420p, etc., qui sont des formats standards Â« logiciels Â».

        Donc :
            hwdownload : copie les donnÃ©es vidÃ©o du GPU vers le CPU.

            format=nv12 : convertit lâ€™image dans un format que ffmpeg (sur CPU) peut utiliser pour appliquer des filtres.



ğŸŸ¢Remarque
Cette opÃ©ration oblige Ã  faire un aller-retour CPU-GPU, donc Ã§a peut Ãªtre plus lent que du full logiciel. Mais câ€™est nÃ©cessaire pour faire du hardsub avec filtre sur GPU Intel.


2. Encoder avec GPU Nvidia (NVENC) si dispo
    ffmpeg -i video.mp4 -vf subtitles=subtitles.srt -c:v h264_nvenc -preset fast -c:a copy output.mp4



